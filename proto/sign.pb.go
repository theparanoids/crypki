// Copyright 2019, Oath Inc.
// Licensed under the terms of the Apache License 2.0. Please see LICENSE file in project root for terms.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.17.3
// source: sign.proto

package proto

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HashAlgo int32

const (
	HashAlgo_Unspecified_Hash HashAlgo = 0
	HashAlgo_SHA224           HashAlgo = 1
	HashAlgo_SHA256           HashAlgo = 2
	HashAlgo_SHA384           HashAlgo = 3
	HashAlgo_SHA512           HashAlgo = 4
)

// Enum value maps for HashAlgo.
var (
	HashAlgo_name = map[int32]string{
		0: "Unspecified_Hash",
		1: "SHA224",
		2: "SHA256",
		3: "SHA384",
		4: "SHA512",
	}
	HashAlgo_value = map[string]int32{
		"Unspecified_Hash": 0,
		"SHA224":           1,
		"SHA256":           2,
		"SHA384":           3,
		"SHA512":           4,
	}
)

func (x HashAlgo) Enum() *HashAlgo {
	p := new(HashAlgo)
	*p = x
	return p
}

func (x HashAlgo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlgo) Descriptor() protoreflect.EnumDescriptor {
	return file_sign_proto_enumTypes[0].Descriptor()
}

func (HashAlgo) Type() protoreflect.EnumType {
	return &file_sign_proto_enumTypes[0]
}

func (x HashAlgo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAlgo.Descriptor instead.
func (HashAlgo) EnumDescriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{0}
}

type Priority int32

const (
	Priority_Unspecified_priority Priority = 0
	Priority_High                 Priority = 5
	Priority_Medium               Priority = 10
	Priority_Low                  Priority = 15
)

// Enum value maps for Priority.
var (
	Priority_name = map[int32]string{
		0:  "Unspecified_priority",
		5:  "High",
		10: "Medium",
		15: "Low",
	}
	Priority_value = map[string]int32{
		"Unspecified_priority": 0,
		"High":                 5,
		"Medium":               10,
		"Low":                  15,
	}
)

func (x Priority) Enum() *Priority {
	p := new(Priority)
	*p = x
	return p
}

func (x Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_sign_proto_enumTypes[1].Descriptor()
}

func (Priority) Type() protoreflect.EnumType {
	return &file_sign_proto_enumTypes[1]
}

func (x Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Priority.Descriptor instead.
func (Priority) EnumDescriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{1}
}

// KeyMeta identifies the private key used in crypto operations.
type KeyMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the key that will be used in crypto operations.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *KeyMeta) Reset() {
	*x = KeyMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMeta) ProtoMessage() {}

func (x *KeyMeta) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMeta.ProtoReflect.Descriptor instead.
func (*KeyMeta) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{0}
}

func (x *KeyMeta) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

// KeyMetas contains a list of KeyMetas.
type KeyMetas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*KeyMeta `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *KeyMetas) Reset() {
	*x = KeyMetas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyMetas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyMetas) ProtoMessage() {}

func (x *KeyMetas) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyMetas.ProtoReflect.Descriptor instead.
func (*KeyMetas) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{1}
}

func (x *KeyMetas) GetKeys() []*KeyMeta {
	if x != nil {
		return x.Keys
	}
	return nil
}

// SSHCertificateSigningRequest specifies the info used for signing an SSH certificate.
type SSHCertificateSigningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the signing key in the HSM used for signing the certificate.
	KeyMeta *KeyMeta `protobuf:"bytes,1,opt,name=key_meta,json=keyMeta,proto3" json:"key_meta,omitempty"`
	// List of usernames or hostnames in the Principals field.
	Principals []string `protobuf:"bytes,2,rep,name=principals,proto3" json:"principals,omitempty"`
	// SSH public key.
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// Validity period of the certificate in seconds.
	Validity uint64 `protobuf:"varint,4,opt,name=validity,proto3" json:"validity,omitempty"`
	// Key ID in the certificate.
	KeyId string `protobuf:"bytes,5,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Critical Options field in the certificate.
	CriticalOptions map[string]string `protobuf:"bytes,6,rep,name=critical_options,json=criticalOptions,proto3" json:"critical_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Extensions field in the certificate.
	Extensions map[string]string `protobuf:"bytes,7,rep,name=extensions,proto3" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Priority of the request as specified by client. If the server is under heavy load, it may
	// decide to process higher priority requests before the lower priority requests.
	// This feature is currently EXPERIMENTAL where priority value is only logged and not used for anything else.
	// Specific implementation will be based on analysis of client request patterns.
	Priority Priority `protobuf:"varint,10,opt,name=priority,proto3,enum=v3.Priority" json:"priority,omitempty"`
}

func (x *SSHCertificateSigningRequest) Reset() {
	*x = SSHCertificateSigningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHCertificateSigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHCertificateSigningRequest) ProtoMessage() {}

func (x *SSHCertificateSigningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHCertificateSigningRequest.ProtoReflect.Descriptor instead.
func (*SSHCertificateSigningRequest) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{2}
}

func (x *SSHCertificateSigningRequest) GetKeyMeta() *KeyMeta {
	if x != nil {
		return x.KeyMeta
	}
	return nil
}

func (x *SSHCertificateSigningRequest) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *SSHCertificateSigningRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SSHCertificateSigningRequest) GetValidity() uint64 {
	if x != nil {
		return x.Validity
	}
	return 0
}

func (x *SSHCertificateSigningRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *SSHCertificateSigningRequest) GetCriticalOptions() map[string]string {
	if x != nil {
		return x.CriticalOptions
	}
	return nil
}

func (x *SSHCertificateSigningRequest) GetExtensions() map[string]string {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *SSHCertificateSigningRequest) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_Unspecified_priority
}

// SSHKey specifies an SSH key that can either be an:
// 1. SSH public key, or
// 2. SSH user/host certificate
type SSHKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encoded string of the SSH key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SSHKey) Reset() {
	*x = SSHKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSHKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSHKey) ProtoMessage() {}

func (x *SSHKey) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSHKey.ProtoReflect.Descriptor instead.
func (*SSHKey) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{3}
}

func (x *SSHKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// X509CertificateSigningRequest specifies the info used for signing an X509 certificate.
type X509CertificateSigningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the signing key in the HSM used for signing the certificate.
	KeyMeta *KeyMeta `protobuf:"bytes,1,opt,name=key_meta,json=keyMeta,proto3" json:"key_meta,omitempty"`
	// X509 certificate signing request encoded in PEM format.
	Csr string `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
	// Validity period of the certificate in seconds.
	Validity uint64 `protobuf:"varint,3,opt,name=validity,proto3" json:"validity,omitempty"`
	// X509 certificate ExtKeyUsage.
	// https://godoc.org/crypto/x509#ExtKeyUsage
	ExtKeyUsage []int32 `protobuf:"varint,4,rep,packed,name=ext_key_usage,json=extKeyUsage,proto3" json:"ext_key_usage,omitempty"`
	// Priority of the request as specified by client. If the server is under heavy load, it may
	// decide to process higher priority requests before the lower priority requests.
	// This feature is currently EXPERIMENTAL where priority value is only logged and not used for anything else.
	// Specific implementation will be based on analysis of client request patterns.
	Priority Priority `protobuf:"varint,10,opt,name=priority,proto3,enum=v3.Priority" json:"priority,omitempty"`
}

func (x *X509CertificateSigningRequest) Reset() {
	*x = X509CertificateSigningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509CertificateSigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509CertificateSigningRequest) ProtoMessage() {}

func (x *X509CertificateSigningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509CertificateSigningRequest.ProtoReflect.Descriptor instead.
func (*X509CertificateSigningRequest) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{4}
}

func (x *X509CertificateSigningRequest) GetKeyMeta() *KeyMeta {
	if x != nil {
		return x.KeyMeta
	}
	return nil
}

func (x *X509CertificateSigningRequest) GetCsr() string {
	if x != nil {
		return x.Csr
	}
	return ""
}

func (x *X509CertificateSigningRequest) GetValidity() uint64 {
	if x != nil {
		return x.Validity
	}
	return 0
}

func (x *X509CertificateSigningRequest) GetExtKeyUsage() []int32 {
	if x != nil {
		return x.ExtKeyUsage
	}
	return nil
}

func (x *X509CertificateSigningRequest) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_Unspecified_priority
}

// X509Certificate specifies an X509 certificate.
type X509Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The X509 certificate encoded in PEM format.
	Cert string `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (x *X509Certificate) Reset() {
	*x = X509Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *X509Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509Certificate) ProtoMessage() {}

func (x *X509Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509Certificate.ProtoReflect.Descriptor instead.
func (*X509Certificate) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{5}
}

func (x *X509Certificate) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

// PublicKey is a encoded string of the public key specified by users.
type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encoded string of the public key.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{6}
}

func (x *PublicKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type BlobSigningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the signing key in the PKCS#11 device used for signing the blob.
	KeyMeta *KeyMeta `protobuf:"bytes,1,opt,name=key_meta,json=keyMeta,proto3" json:"key_meta,omitempty"`
	// the hash digest of blob in base64 which will be signed.
	Digest string `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	// the algorithm of hash function used to generate the digest
	// https://golang.org/pkg/crypto/#Hash.
	HashAlgorithm HashAlgo `protobuf:"varint,3,opt,name=hash_algorithm,json=hashAlgorithm,proto3,enum=v3.HashAlgo" json:"hash_algorithm,omitempty"`
	// Priority of the request as specified by client. If the server is under heavy load, it may
	// decide to process higher priority requests before the lower priority requests.
	// This feature is currently EXPERIMENTAL where priority value is only logged and not used for anything else.
	// Specific implementation will be based on analysis of client request patterns.
	Priority Priority `protobuf:"varint,10,opt,name=priority,proto3,enum=v3.Priority" json:"priority,omitempty"`
}

func (x *BlobSigningRequest) Reset() {
	*x = BlobSigningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobSigningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobSigningRequest) ProtoMessage() {}

func (x *BlobSigningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobSigningRequest.ProtoReflect.Descriptor instead.
func (*BlobSigningRequest) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{7}
}

func (x *BlobSigningRequest) GetKeyMeta() *KeyMeta {
	if x != nil {
		return x.KeyMeta
	}
	return nil
}

func (x *BlobSigningRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *BlobSigningRequest) GetHashAlgorithm() HashAlgo {
	if x != nil {
		return x.HashAlgorithm
	}
	return HashAlgo_Unspecified_Hash
}

func (x *BlobSigningRequest) GetPriority() Priority {
	if x != nil {
		return x.Priority
	}
	return Priority_Unspecified_priority
}

// Signature is a base64 encoded result of signing a blob.
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{8}
}

func (x *Signature) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

var File_sign_proto protoreflect.FileDescriptor

var file_sign_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x33,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x99, 0x04, 0x0a, 0x1c, 0x53, 0x53, 0x48, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x60,
	0x0a, 0x10, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x53,
	0x48, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x50, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x42, 0x0a, 0x14,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3d, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x1a, 0x0a, 0x06, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xc3, 0x01, 0x0a, 0x1d,
	0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x73, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x4b,
	0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x76, 0x33, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x25, 0x0a, 0x0f, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x22, 0x1d, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x62,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x41, 0x6c, 0x67, 0x6f, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x29, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x50, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68,
	0x41, 0x6c, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x48, 0x61, 0x73, 0x68, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48,
	0x41, 0x32, 0x32, 0x34, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x04, 0x2a, 0x43, 0x0a, 0x08, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x69, 0x67, 0x68, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x10, 0x0f, 0x32,
	0xe1, 0x0a, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x6e, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e,
	0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x69, 0x67, 0x2f, 0x78, 0x35, 0x30,
	0x39, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x58, 0x35, 0x30, 0x39, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x1a, 0x13, 0x2e, 0x76, 0x33, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f,
	0x76, 0x33, 0x2f, 0x73, 0x69, 0x67, 0x2f, 0x78, 0x35, 0x30, 0x39, 0x2d, 0x63, 0x65, 0x72, 0x74,
	0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x58, 0x35, 0x30, 0x39, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x76, 0x33, 0x2e,
	0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x76, 0x33, 0x2e, 0x58, 0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2c, 0x2f, 0x76, 0x33, 0x2f,
	0x73, 0x69, 0x67, 0x2f, 0x78, 0x35, 0x30, 0x39, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x6b, 0x65,
	0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x29, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x53, 0x48, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0c, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x69, 0x67, 0x2f,
	0x73, 0x73, 0x68, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x6b, 0x65,
	0x79, 0x73, 0x12, 0x6b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x53, 0x48,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x1a, 0x0a, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x69, 0x67, 0x2f,
	0x73, 0x73, 0x68, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x6b, 0x65,
	0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x7d, 0x12,
	0x83, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x53, 0x48, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x76, 0x33, 0x2e,
	0x53, 0x53, 0x48, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x76,
	0x33, 0x2e, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35,
	0x22, 0x30, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x69, 0x67, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x75, 0x73,
	0x65, 0x72, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65,
	0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x53, 0x53, 0x48, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x76, 0x33, 0x2e,
	0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x12, 0x1a, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x69, 0x67, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x68, 0x6f,
	0x73, 0x74, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x6b, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x53, 0x48, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x0b, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x0a, 0x2e, 0x76,
	0x33, 0x2e, 0x53, 0x53, 0x48, 0x4b, 0x65, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x12, 0x27, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x69, 0x67, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x68, 0x6f,
	0x73, 0x74, 0x2d, 0x63, 0x65, 0x72, 0x74, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x7d, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x50, 0x6f,
	0x73, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x53, 0x48, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x53, 0x48, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x53, 0x48, 0x4b,
	0x65, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x30, 0x2f, 0x76, 0x33, 0x2f,
	0x73, 0x69, 0x67, 0x2f, 0x73, 0x73, 0x68, 0x2d, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x63, 0x65, 0x72,
	0x74, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x7d, 0x3a, 0x01, 0x2a, 0x12,
	0x5e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x73, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76,
	0x33, 0x2f, 0x73, 0x69, 0x67, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x57, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x12, 0x0b, 0x2e, 0x76, 0x33, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x1a, 0x0d, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x69,
	0x67, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x7d, 0x12, 0x69, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x16, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x69, 0x67,
	0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x6b, 0x65, 0x79, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x7d,
	0x3a, 0x01, 0x2a, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x68, 0x65, 0x70, 0x61, 0x72, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x73, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x6b, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_sign_proto_rawDescOnce sync.Once
	file_sign_proto_rawDescData = file_sign_proto_rawDesc
)

func file_sign_proto_rawDescGZIP() []byte {
	file_sign_proto_rawDescOnce.Do(func() {
		file_sign_proto_rawDescData = protoimpl.X.CompressGZIP(file_sign_proto_rawDescData)
	})
	return file_sign_proto_rawDescData
}

var file_sign_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sign_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_sign_proto_goTypes = []interface{}{
	(HashAlgo)(0),                         // 0: v3.HashAlgo
	(Priority)(0),                         // 1: v3.Priority
	(*KeyMeta)(nil),                       // 2: v3.KeyMeta
	(*KeyMetas)(nil),                      // 3: v3.KeyMetas
	(*SSHCertificateSigningRequest)(nil),  // 4: v3.SSHCertificateSigningRequest
	(*SSHKey)(nil),                        // 5: v3.SSHKey
	(*X509CertificateSigningRequest)(nil), // 6: v3.X509CertificateSigningRequest
	(*X509Certificate)(nil),               // 7: v3.X509Certificate
	(*PublicKey)(nil),                     // 8: v3.PublicKey
	(*BlobSigningRequest)(nil),            // 9: v3.BlobSigningRequest
	(*Signature)(nil),                     // 10: v3.Signature
	nil,                                   // 11: v3.SSHCertificateSigningRequest.CriticalOptionsEntry
	nil,                                   // 12: v3.SSHCertificateSigningRequest.ExtensionsEntry
	(*emptypb.Empty)(nil),                 // 13: google.protobuf.Empty
}
var file_sign_proto_depIdxs = []int32{
	2,  // 0: v3.KeyMetas.keys:type_name -> v3.KeyMeta
	2,  // 1: v3.SSHCertificateSigningRequest.key_meta:type_name -> v3.KeyMeta
	11, // 2: v3.SSHCertificateSigningRequest.critical_options:type_name -> v3.SSHCertificateSigningRequest.CriticalOptionsEntry
	12, // 3: v3.SSHCertificateSigningRequest.extensions:type_name -> v3.SSHCertificateSigningRequest.ExtensionsEntry
	1,  // 4: v3.SSHCertificateSigningRequest.priority:type_name -> v3.Priority
	2,  // 5: v3.X509CertificateSigningRequest.key_meta:type_name -> v3.KeyMeta
	1,  // 6: v3.X509CertificateSigningRequest.priority:type_name -> v3.Priority
	2,  // 7: v3.BlobSigningRequest.key_meta:type_name -> v3.KeyMeta
	0,  // 8: v3.BlobSigningRequest.hash_algorithm:type_name -> v3.HashAlgo
	1,  // 9: v3.BlobSigningRequest.priority:type_name -> v3.Priority
	13, // 10: v3.Signing.GetX509CertificateAvailableSigningKeys:input_type -> google.protobuf.Empty
	2,  // 11: v3.Signing.GetX509CACertificate:input_type -> v3.KeyMeta
	6,  // 12: v3.Signing.PostX509Certificate:input_type -> v3.X509CertificateSigningRequest
	13, // 13: v3.Signing.GetUserSSHCertificateAvailableSigningKeys:input_type -> google.protobuf.Empty
	2,  // 14: v3.Signing.GetUserSSHCertificateSigningKey:input_type -> v3.KeyMeta
	4,  // 15: v3.Signing.PostUserSSHCertificate:input_type -> v3.SSHCertificateSigningRequest
	13, // 16: v3.Signing.GetHostSSHCertificateAvailableSigningKeys:input_type -> google.protobuf.Empty
	2,  // 17: v3.Signing.GetHostSSHCertificateSigningKey:input_type -> v3.KeyMeta
	4,  // 18: v3.Signing.PostHostSSHCertificate:input_type -> v3.SSHCertificateSigningRequest
	13, // 19: v3.Signing.GetBlobAvailableSigningKeys:input_type -> google.protobuf.Empty
	2,  // 20: v3.Signing.GetBlobSigningKey:input_type -> v3.KeyMeta
	9,  // 21: v3.Signing.PostSignBlob:input_type -> v3.BlobSigningRequest
	3,  // 22: v3.Signing.GetX509CertificateAvailableSigningKeys:output_type -> v3.KeyMetas
	7,  // 23: v3.Signing.GetX509CACertificate:output_type -> v3.X509Certificate
	7,  // 24: v3.Signing.PostX509Certificate:output_type -> v3.X509Certificate
	3,  // 25: v3.Signing.GetUserSSHCertificateAvailableSigningKeys:output_type -> v3.KeyMetas
	5,  // 26: v3.Signing.GetUserSSHCertificateSigningKey:output_type -> v3.SSHKey
	5,  // 27: v3.Signing.PostUserSSHCertificate:output_type -> v3.SSHKey
	3,  // 28: v3.Signing.GetHostSSHCertificateAvailableSigningKeys:output_type -> v3.KeyMetas
	5,  // 29: v3.Signing.GetHostSSHCertificateSigningKey:output_type -> v3.SSHKey
	5,  // 30: v3.Signing.PostHostSSHCertificate:output_type -> v3.SSHKey
	3,  // 31: v3.Signing.GetBlobAvailableSigningKeys:output_type -> v3.KeyMetas
	8,  // 32: v3.Signing.GetBlobSigningKey:output_type -> v3.PublicKey
	10, // 33: v3.Signing.PostSignBlob:output_type -> v3.Signature
	22, // [22:34] is the sub-list for method output_type
	10, // [10:22] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_sign_proto_init() }
func file_sign_proto_init() {
	if File_sign_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sign_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyMetas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHCertificateSigningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSHKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509CertificateSigningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*X509Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobSigningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sign_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sign_proto_goTypes,
		DependencyIndexes: file_sign_proto_depIdxs,
		EnumInfos:         file_sign_proto_enumTypes,
		MessageInfos:      file_sign_proto_msgTypes,
	}.Build()
	File_sign_proto = out.File
	file_sign_proto_rawDesc = nil
	file_sign_proto_goTypes = nil
	file_sign_proto_depIdxs = nil
}
